import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'gridChallenge' function below.
     *
     * The function is expected to return a STRING.
     * The function accepts STRING_ARRAY grid as parameter.
     */

    public static String gridChallenge(List<String> grid) {
    // Write your code here
        String ori = "";
        for (String s : grid) {
            char[] temp = s.toCharArray();
            Arrays.sort(temp);
            ori += new String(temp) + " ";
        }
        String[] orig = ori.split("\\s+");
        int first = grid.size();
        int sec = grid.get(0).length();
        char[][] find = new char[first][sec];
        for (int i = 0; i < first; i++) {
            char[] row = orig[i].toCharArray();
            for (int j = 0; j < sec; j++) {
                find[i][j] = row[j];
            }
        }
       
        List<String> w = new ArrayList<>();
        for (int i = 0; i < sec; i++) {
            String x = "";
            for (int j = 0; j < first; j++) {
                x += find[j][i];
            }
            w.add(x);
        }
       // System.out.println(w);

        boolean q = true;
        for (String h : w) {
            char[] charArray = h.toCharArray();
            Arrays.sort(charArray);
            String str = new String(charArray);
            if (!h.equals(str)) {
                q = false;
                break;
            }
        }
      if(q) return "YES";
      else return "NO";
    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int t = Integer.parseInt(bufferedReader.readLine().trim());

        IntStream.range(0, t).forEach(tItr -> {
            try {
                int n = Integer.parseInt(bufferedReader.readLine().trim());

                List<String> grid = IntStream.range(0, n).mapToObj(i -> {
                    try {
                        return bufferedReader.readLine();
                    } catch (IOException ex) {
                        throw new RuntimeException(ex);
                    }
                })
                    .collect(toList());

                String result = Result.gridChallenge(grid);

                bufferedWriter.write(result);
                bufferedWriter.newLine();
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        });

        bufferedReader.close();
        bufferedWriter.close();
    }
}
