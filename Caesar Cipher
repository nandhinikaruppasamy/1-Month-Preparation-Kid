import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'caesarCipher' function below.
     *
     * The function is expected to return a STRING.
     * The function accepts following parameters:
     *  1. STRING s
     *  2. INTEGER k
     */

    public static String caesarCipher(String s, int k) {
    // Write your code here
  List<Character> list = new ArrayList<>();
      for(int i=0;i<26;i++){
           list.add((char)(i+'a'));
       }
      List<Character> list1 = new ArrayList<>();
      for(char c : list) list1.add(c);
      for(int i=0;i<k;i++){
          char t = list1.get(0);
          list1.add(list1.size(),t);
          list1.remove(0);
      }
       String temp = "";
    for(int i=0;i<s.length();i++){
        char d = s.charAt(i);
        int index = list.indexOf(Character.toLowerCase(d)); 
        if (index != -1) {
            char encryptedChar = list1.get(index);
            if (Character.isUpperCase(d)) {
                temp += Character.toUpperCase(encryptedChar); 
            } else {
                temp += encryptedChar;
            }
        } else {
            temp += d; 
        }
    }
    return temp;
    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int n = Integer.parseInt(bufferedReader.readLine().trim());

        String s = bufferedReader.readLine();

        int k = Integer.parseInt(bufferedReader.readLine().trim());

        String result = Result.caesarCipher(s, k);

        bufferedWriter.write(result);
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
